/**
 *
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。

  提示：

  请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
  在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 3 中，输入表示有符号整数 -3。

  示例 1：
    输入：n = 00000000000000000000000000001011
    输出：3
    解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。

  示例 2：
    输入：n = 00000000000000000000000010000000
    输出：1
    解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。

  示例 3：
    输入：n = 11111111111111111111111111111101
    输出：31
    解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

  提示：
    - 输入必须是长度为 32 的 二进制串 。

  进阶：
    - 如果多次调用这个函数，你将如何优化你的算法？
 * @param {number} n
 * @return {number}
 */

/**
 * 计算给定数字的二进制表示中1的个数。
 *
 * @param n - 需要计算的数字。
 * @returns 返回数字n的二进制表示中1的个数。
 */
var hammingWeight = function(n: number) {
  let result = 0; // 初始化结果为0
  while(n) { // 当n不为0时，继续循环
      result += n % 2; // 将n的最低位(最右边的位)加到结果中
      n = n >>> 1; // 无符号右移，将n向右移一位，丢弃最低位
  }
  return result; // 返回结果
};
