/**
 * 给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。

  你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。

  返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。

  示例 1：
    输入：[7,1,5,3,6,4]
    输出：5
    解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
        注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
  示例 2：
    输入：prices = [7,6,4,3,1]
    输出：0
    解释：在这种情况下, 没有交易完成, 所以最大利润为 0。

  提示：
    - 1 <= prices.length <= 10 ** 5
    - 0 <= prices[i] <= 10 ** 4
 */

/**
 * 计算给定股票价格数组中的最大利润。
 * 解题思路:
 *  通过遍历股票价格数组，动态更新最小价格和最大利润。在遍历过程中，如果遇到比当前最小价格更低的价格，则更新最小价格；
 *  如果遇到可以通过卖出股票获得的利润大于当前最大利润，则更新最大利润。最终返回的就是能够通过买卖股票获得的最大利润。
 * @param prices 股票每天的价格数组。
 * @return 返回能够通过买卖股票获得的最大利润。
 */
function maxProfit(prices: number[]): number {
  // 初始化最小价格为数组中的第一个元素
  let min = prices[0];
  // 初始化结果为0，表示尚未产生利润
  let res = 0;
  // 遍历价格数组
  for (let i = 0, len = prices.length; i < len; i ++) {
    // 如果当前价格小于等于最小价格，则更新最小价格
    if (min >= prices[i]) {
      min = prices[i];
    } else {
      // 如果当前价格大于最小价格，则计算当前利润并更新结果
      res = Math.max(res, prices[i] - min);
    }
  }

  return res;
};

export {};
