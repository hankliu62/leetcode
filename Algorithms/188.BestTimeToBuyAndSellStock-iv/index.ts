/**
 * 给你一个整数数组 prices 和一个整数 k ，其中 prices[i] 是某支给定的股票在第 i 天的价格。

  设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。也就是说，你最多可以买 k 次，卖 k 次。

  注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

  示例 1：
    输入：k = 2, prices = [2,4,1]
    输出：2
    解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。

  示例 2：
    输入：k = 2, prices = [3,2,6,5,0,3]
    输出：7
    解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
        随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。

  提示：
    - 1 <= k <= 100
    - 1 <= prices.length <= 1000
    - 0 <= prices[i] <= 1000
 */

/**
 * 计算在给定股票价格数组中能通过最多k次交易获得的最大利润。
 * @param k 最多可以进行的交易次数。
 * @param prices 股票每天的价格数组。
 * @return 能获得的最大利润。
 */
function maxProfit(k: number, prices: number[]): number {
  // 使用动态规划来解决问题，初始化dp数组，长度为k*2，偶数索引表示持有股票的状态，奇数索引表示不持有股票的状态。
  // 表示 第 k 次买入卖出的最大利润。
  const dp = Array.from({ length: k * 2 }, (_, k) => k % 2 === 0 ? -prices[0] : 0);

  const len = prices.length;
  for (let i = 0; i < len; i ++) {
    for (let j = 0; j < k * 2; j ++) {
      // 当前状态为持有股票，考虑是否卖出，更新状态值。
      if (j % 2 === 0) {
        dp[j] = Math.max(dp[j], (j === 0 ? 0 : dp[j - 1]) - prices[i]);
      } else if (j % 2 === 1) { // 当前状态为不持有股票，考虑是否买入，更新状态值。
        dp[j] = Math.max(dp[j], dp[j - 1] + prices[i]);
      }
    }
  }

  // 返回最后不持有股票时的最大利润。
  return Math.max(dp[k * 2 - 1], 0);
};
