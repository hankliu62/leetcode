/**
 * 136. 只出现一次的数字 https://leetcode.cn/problems/single-number [简单]

  给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

  你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。

  示例 1 ：
    输入：nums = [2,2,1]
    输出：1
  示例 2 ：
    输入：nums = [4,1,2,1,2]
    输出：4
  示例 3 ：
    输入：nums = [1]
    输出：1
  提示：
    1 <= nums.length <= 3 * 10 ** 4
    -3 * 10 ** 4 <= nums[i] <= 3 * 10 ** 4
    除了某个元素只出现一次以外，其余每个元素均出现两次。
 */

/**
 * 找出数组中只出现一次的数字
 * 解题思路:
 *  任何数与自身异或的结果是0，任何数与0异或的结果是它本身。因此，数组中成对出现的数字最终异或的结果是0，
 *  只出现一次的数字与其它所有数字异或的结果就是它本身。
 * @param nums 包含多个数字的数组，其中只有一个数字只出现一次，其他数字都成对出现
 * @returns 返回只出现一次的数字
 */
function singleNumber(nums: number[]): number {
  // 从数组中取出第一个数字作为初始结果
  let res = nums.shift()!;
  // 遍历数组，使用异或运算找到只出现一次的数字
  for (const num of nums) {
    res ^= num;
  }
  return res;
};
